plugins {
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'maven-publish'
}

//task generateSourcesJar(type: Jar){
//    from android.sourceSets.main.java.srcDirs
//    classifier 'sources'
//}

android {
    namespace "com.google.maps.android.compose"
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.composecompiler.get()
    }

    buildFeatures {
        buildConfig false
        compose true
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += '-Xexplicit-api=strict'
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    }
    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }
}

dependencies {
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.core
    implementation libs.androidx.compose.foundation
    implementation libs.kotlin
    implementation libs.maps.playservice
    implementation libs.maps.ktx.std

    testImplementation libs.test.junit

    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.test.espresso
    androidTestImplementation libs.androidx.test.junit.ktx
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.my-company'
            artifactId = 'my-library'
            version = '1.0'

            afterEvaluate {
                from components.release
            }
        }
    }
    repositories {
        maven {
            name = 'myrepo'
            url = "${project.buildDir}/repo"
        }
    }
}

tasks.register('generateRepo', Zip) {
    def publishTask = tasks.named('publishReleasePublicationToMyrepoRepository')
    from publishTask.map { it.getRepository().getUrl() }
    into 'mylibrary'
    archiveFileName.set('mylibrary.zip')
}